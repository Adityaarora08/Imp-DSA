class Solution {
public:
    // static bool comparator(string s,string t){
    //     return s.length()<t.length();
    // }
    // bool compare(string newWord , string prevWord){
    //     bool flag=false;
    //     int n=newWord.size(),m=prevWord.size();
    //     // if(n!=m+1)return false;
    //     if(n==m+1){
    //         int j=0;
    //         for(int i=0;i<n;i++){
    //             if(newWord[i]!=prevWord[j] && flag==true){
    //                 return false;
    //             }
    //             if(newWord[i]!=prevWord[j] && flag==false){
    //                 flag=true;
    //             }else{
    //                 j++;
    //             }
    //          }
    //     }else{
    //         return false;
    //     }
    //     return true;
    // }
    //LIS SOLUTION
    // int longestStrChain(vector<string>& words) {
    //     int n=words.size(),maxi=0;
    //     sort(words.begin(),words.end(),comparator);
    //     vector<int> dp(n,1);
    //     for(int i=0;i<n;i++){
    //         for(int prev=0;prev<i;prev++){
    //             if(compare(words[i],words[prev]) && dp[prev]+1>dp[i]){
    //                 dp[i]=1+dp[prev];
    //             }
    //         }
    //         if(dp[i]>maxi){
    //             maxi=dp[i];
    //         }
    //     }
    //     return maxi;
    // }
     static bool compare(const string &s1, const string &s2) {
        return s1.length() < s2.length();
    }
//OPTIMISED SOLUTION
    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), compare);
        unordered_map<string, int> dp;
        int res = 0;
        for (string w : words) {
            for (int i = 0; i < w.length(); i++) {
                string pre = w.substr(0, i) + w.substr(i + 1);
                dp[w] = max(dp[w], dp.find(pre) == dp.end() ? 1 : dp[pre] + 1);
            }
            res = max(res, dp[w]);
        }
        return res;
    }
};
