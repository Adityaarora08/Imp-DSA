class Solution {
public:
    int f(int i,int buy,vector<int>& prices,int n,vector<vector<int>> &dp){
        if(i>=n)return 0;
        int profit=0;
        if(dp[i][buy]!=-1)return dp[i][buy];
        if(buy){
            int sell=prices[i]+f(i+2,0,prices,n,dp);
            int notSell= f(i+1,1,prices,n,dp);
            profit=max(sell,notSell);
        }else{
            int buy=-prices[i]+f(i+1,1,prices,n,dp);
            int notBuy=f(i+1,0,prices,n,dp);
            profit=max(buy,notBuy);
        }
        return dp[i][buy]=profit;
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n+2,vector<int> (2,-1));
        // return f(0,0,prices,n,dp);
        dp[n+1][0]=dp[n][0]=dp[n+1][1]=dp[n][1]=0;
        for(int i=n-1;i>=0;i--){
            for(int buy=0;buy<2;buy++){
                int profit=0;
                if(buy){
                    int sell=prices[i]+dp[i+2][0];
                    int notSell=dp[i+1][1];
                    profit=max(sell,notSell);
                }else{
                    int buy=-prices[i]+dp[i+1][1];
                    int notBuy=dp[i+1][0];
                    profit=max(buy,notBuy);
                }
                dp[i][buy]=profit;
            }
        }
        return dp[0][0];
    }
};
