//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


class Matrix
{
public:
    template <class T>
    static void input(vector<vector<T>> &A,int n,int m)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                scanf("%d ",&A[i][j]);
            }
        }
    }
 
    template <class T>
    static void print(vector<vector<T>> &A)
    {
        for (int i = 0; i < A.size(); i++)
        {
            for (int j = 0; j < A[i].size(); j++)
            {
                cout << A[i][j] << " ";
            }
            cout << endl;
        }
    }
};


// } Driver Code Ends
class Solution {
  public:
    static bool comparator(vector<int> &a, vector<int> &b){
        return a[1]<b[1];
    }
     int maxStop(int n, int m, vector<vector<int>> &t) {
         
      vector<int>plat(n+1,0);
      vector<pair<int,int>>v;
      for(int i = 0;i < t.size();i++)
      {
          v.push_back({t[i][1],i});
      }
      int ans = 0;

      sort(v.begin(),v.end());
      for(int i = 0;i < v.size();i++)
      {
          if(plat[t[v[i].second][2]] <= t[v[i].second][0])
          {
              ans++;
              plat[t[v[i].second][2]] = v[i].first;
          }
      }
      return ans;
  }
    // int maxStop(int n, int m, vector<vector<int>> &trains) {
    //     // code here
    //     // vector<vector<int>> b=trains;
    //     sort(trains.begin(),trains.end(),comparator);
    //     // sort(trains.begin(),trains.end(),comparator2);
    //     // int endd=trains[0][1];
    //     int i=0;
    //     int cnt=0;
    //     vector<int> platforms(n+1,0);
    //     while(i<trains.size()){
    //         if(platforms[trains[i][2]]<=trains[i][0]){
    //           cnt++;
    //           platforms[trains[i][2]]=trains[i][1];
    //         }
    //         // cout<<trains[i][0]<<" "<<trains[i][1]<<endl;
    //         i++;
    //     }
    //     return cnt;
    // }
};


//{ Driver Code Starts.

int main(){
    int t;
    scanf("%d ",&t);
    while(t--){
        
        int n; 
        scanf("%d",&n);
        
        
        int m; 
        scanf("%d",&m);
        
        
        vector<vector<int>> trains(m, vector<int>(3));
        Matrix::input(trains,m,3);
        
        Solution obj;
        int res = obj.maxStop(n, m, trains);
        
        cout<<res<<endl;
        
    }
}

// } Driver Code Ends
