class Solution {
public:
    int maxii(int i,int j,vector<int>& nums1, vector<int>& nums2, vector<vector<int>> &dp){
        if(i>=nums1.size() || j>=nums2.size())return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int take=0,notTake=0;
        if(nums1[i]==nums2[j]){
            take=1+maxii(i+1,j+1,nums1,nums2,dp);
        }else{
            take= maxii(i,j+1,nums1,nums2,dp); 
        }
        notTake=maxii(i+1,j,nums1,nums2,dp);
        return dp[i][j]=max(take,notTake);
    }
    int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {
        // vector<vector<int>> dp(nums1.size(),vector<int>(nums2.size(),-1));
        // return maxii(0,0,nums1,nums2,dp);
         int n = nums1.size(), m = nums2.size();
        if (n < m) return maxUncrossedLines(nums2, nums1);

        vector<int> dp(m + 1);
        for (int i = 1; i <= n; i++) {
            int prev = 0;
            for (int j = 1; j <= m; j++) {
                int curr = dp[j];
                if (nums1[i-1] == nums2[j-1]) {
                    dp[j] = prev + 1;
                } else {
                    dp[j] = max(dp[j-1], curr);
                }
                prev = curr;
            }
        }
        return dp[m];
    }
};
