1. Activity Selection
N-meetings in a room types-
int activitySelection(vector<int> start, vector<int> end, int n)
    {
        // Your code here
        vector<pair<int,int>> arr;
        for(int i=0;i<n;i++){
            arr.push_back({end[i],start[i]});
        }
        sort(arr.begin(),arr.end());
        int endd=arr[0].first,count=1;
        for(int i=0;i<n;i++){
            if(arr[i].second>endd){
                count++;
                endd=max(endd,arr[i].first);
            }
        }
        return count;
        }
 2. Job Scheduling
 static bool comparator(Job a,Job b){
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        vector<int> ans(2,0);
        sort(arr,arr+n,comparator);
        vector<bool> deadd(n,false);
        for(int i=0;i<n;i++){
            int j=arr[i].dead-1;
            while(j>=0&&deadd[j])j--;
            if(j<0){
                continue;
            }else{
                ans[0]++;
                ans[1]+=arr[i].profit;
                deadd[j]=true;
            }
        }
        return ans;
    } 
3. Factional Knapsack - put items with highest weight to value ratio first in bag
4. Choose and Swap
string chooseandswap(string a){
        set<char> st;
        for(int i=0;i<a.length();i++){
            st.insert(a[i]);
        }
        for(int i=0;i<a.length();i++){
            st.erase(a[i]);
            if(st.empty())break;
            char curr=*st.begin();
            if(a[i]>curr){
                char x=a[i];
                for(int j=0;j<a.length();j++){
                    if(a[j]==x){
                        a[j]=curr;
                    }else if(a[j]==curr){
                        a[j]=x;
                    }
                }
                break;
            }
        }
        return a;
    }
 5. Minimum Platforms
 int findPlatform(int arr[], int dep[], int n)
    {
    	sort(arr,arr+n);sort(dep,dep+n);
    	int count=0,maxi=0;
    	int i=0,j=0;
    	while(i<n){
    	    if(arr[i]<=dep[j]){
    	        i++;
    	        count++;
    	    }else{
    	        j++;
    	        count--;
    	    }
    	    maxi=max(maxi,count);
    	}
    	return maxi;
    }
  6. Buy maximum stocks
  int buyMaximumProducts(int n, int k, int price[]){
        vector<pair<int,int>> stocks;
        for(int i=0;i<n;i++){
            stocks.push_back({price[i],i+1});
        }
        sort(stocks.begin(),stocks.end());
        int i=0;
        int count=0;
        while(i<stocks.size() && k>0){
            if(k<stocks[i].first)break;
            if(stocks[i].first<=0)break;
            int num=k/(stocks[i].first);
            if(num<stocks[i].second){
                k-=(stocks[i].first)*num;
                count+=num;
            }else{
                k-=(stocks[i].first)*(stocks[i].second);
                count+=stocks[i].second;
            }
            i++;
        }
        return count;
    }
   7. Minimum Cost to cut a board into squares
   static bool comparator(int a,int b){
        return a>b;
    }
    int minimumCostOfBreaking(vector<int> X, vector<int> Y, int m, int n){
        //Write your code here
        sort(X.begin(),X.end(),comparator);
        sort(Y.begin(),Y.end(),comparator);
        int hCount=1,vCount=1;
        int cost=0;
        int i=0,j=0;
        while(i<X.size() && j<Y.size()){
            if(X[i]>Y[j]){
                cost+=X[i]*vCount;
                hCount++;
                i++;
            }else{
                cost+=Y[j]*hCount;
                vCount++;
                j++;
            }
        }
        while(i<X.size()){
            cost+=X[i]*vCount;
            i++;
        }
         while(j<Y.size()){
            cost+=Y[j]*hCount;
            j++;
        }
        return cost;
        
    }
