class Solution {
public:
    int f(int i,vector<int>& nums,int prev,int n,vector<vector<int>> &dp){
        if(i>=n)return 0;
        if(dp[i][prev+1]!=-1)return dp[i][prev+1];
        int notTake=f(i+1,nums,prev,n,dp);
        if(prev==-1 || nums[i]>nums[prev]){
            int take=1+f(i+1,nums,i,n,dp);
            notTake= max(take,notTake);
        }
        return dp[i][prev+1]=notTake;
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        //Binary Search 
        vector<int> temp;
        temp.push_back(nums[0]);
        for(int i=0;i<n;i++){
            if(nums[i]>temp.back()){
                temp.push_back(nums[i]);
            }else{
                int ind=lower_bound(temp.begin(),temp.end(),nums[i])-temp.begin();
                temp[ind]=nums[i];
            }
        }
        return temp.size();


        //Space optimized
        // vector<int> dp(n+1,0),temp(n+1,0);
        // for(int i=n-1;i>=0;i--){
        //     for(int prev=i-1;prev>=-1;prev--){
        //         int notTake=dp[prev+1];
        //         if(prev==-1 || nums[i]>nums[prev]){
        //             int take=1+dp[i+1];
        //             notTake= max(take,notTake);
        //         }
        //         temp[prev+1]=notTake;
        //     }
        //     dp=temp;
        // }
        // return dp[0];

        //Tabulation
        // vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        // for(int i=n-1;i>=0;i--){
        //     for(int prev=i-1;prev>=-1;prev--){
        //         int notTake=dp[i+1][prev+1];
        //         if(prev==-1 || nums[i]>nums[prev]){
        //             int take=1+dp[i+1][i+1];
        //             notTake= max(take,notTake);
        //         }
        //         dp[i][prev+1]=notTake;
        //     }
        // }
        // return dp[0][0];

        // return f(0,nums,-1,n,dp);
        // int ans=0;
        // vector<int> dp(n,1);
        // for(int i=0;i<n;i++){
        //     int j=i-1;
        //     int maxi=0;
        //     while(j>=0){
        //         if(nums[i]>nums[j]){
        //             maxi=max(maxi,dp[j]);
        //         }
        //         j--;
        //     }
        //     dp[i]+=maxi;
        //     ans=max(ans,dp[i]);
        //     // dp[i]++;
        // }
        // return ans;
    }
};
