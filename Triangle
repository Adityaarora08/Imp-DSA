class Solution {
public:
int path(int i,int j,vector<vector<int>>& triangle,int n,vector<vector<int>>& dp){
    if(i==n-1 || j==n-1){
        return triangle[i][j];
    }
    if(i<0 ||j<0)return INT_MAX;
    if(dp[i][j]!=-1)return dp[i][j];
    int curr=path(i+1,j,triangle,n,dp);
    int next=path(i+1,j+1,triangle,n,dp);
    return dp[i][j]=triangle[i][j]+min(curr,next);
}
/*
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int m=triangle[n-1].size();
        vector<vector<int> > dp(n,vector<int> (m,-1));
        // return path(0,0,triangle,n,dp);
        for(int i=0;i<n;i++){
            dp[n-1][i]=triangle[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int down=dp[i+1][j]+triangle[i][j];
                int nex=dp[i+1][j+1]+triangle[i][j];
                dp[i][j]=min(down,nex);
            }
        }
        return dp[0][0];
    }
    */
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int m=triangle[n-1].size();
       vector<int> dp(n);
        // return path(0,0,triangle,n,dp);
        for(int i=0;i<n;i++){
            dp[i]=triangle[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            vector<int> temp(n);
            for(int j=i;j>=0;j--){
                int down=dp[j]+triangle[i][j];
                int nex=dp[j+1]+triangle[i][j];
                temp[j]=min(down,nex);
            }
            dp=temp;
        }
        return dp[0];
    }
};
