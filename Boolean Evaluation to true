#include <bits/stdc++.h> 
#define mod 1000000007
int f(int i,int j,int isTrue,string& exp,vector<vector<vector<long long>>> dp){
    if(i>j)return 0;
    if(i==j){
        if(isTrue){
            return exp[i]=='T';
        }else{
            return exp[i]=='F';
        }
    }
    if(dp[i][j][isTrue]!=-1)return dp[i][j][isTrue];
    long long ways=0;
    for(int k=i+1;k<=j-1;k+=2){
        long long LT=f(i,k-1,1,exp,dp);
        long long LF=f(i,k-1,0,exp,dp);
        long long RT=f(k+1,j,1,exp,dp);
        long long RF=f(k+1,j,0,exp,dp); 
        if(exp[k]=='&'){
            if(isTrue){
                ways=(ways+ (LT*RT)%mod)%mod;
            }else{
                ways=(ways+ (LF*RF)%mod+(LF*RT)%mod+(LT*RF)%mod)%mod;
            }
        }else if(exp[k]=='|'){
            if(isTrue){
                ways=(ways+ (LT*RT)%mod+(LF*RT)%mod+(LT*RF)%mod)%mod;
            }else{
                ways=(ways+ (LF*RF)%mod)%mod;
            }
        }else{
            if(isTrue){
                ways=(ways+(LF*RT)%mod+(LT*RF)%mod)%mod;
            }else{
                ways=(ways+ (LF*RF)%mod+(LT*RT)%mod)%mod;
            }
        }
    }
    return dp[i][j][isTrue]=ways;
}
int evaluateExp(string & exp) {
    // Write your code here.
    int n=exp.length();
    vector<vector<vector<long long>>> dp(n,vector<vector<long long>>(n,vector<long long>(2,0)));
    // return f(0,n-1,1,exp,dp);
    for(int i=0;i<n;i++){
        dp[i][i][1] = exp[i] == 'T';
        dp[i][i][0] = exp[i] == 'F';
    }
    for(int i=n-1;i>=0;i--){
        for(int j=i+1;j<n;j++){
            for(int isTrue=0;isTrue<2;isTrue++){
                long long ways=0;
                // if(i>j)continue;
                for(int k=i+1;k<=j-1;k+=2){
                long long LT=dp[i][k-1][1];
                long long LF=dp[i][k-1][0];
                long long RT=dp[k+1][j][1];
                long long RF=dp[k+1][j][0]; 
                if(exp[k]=='&'){
                    if(isTrue){
                        ways=(ways+ (LT*RT)%mod)%mod;
                    }else{
                        ways=(ways+ (LF*RF)%mod+(LF*RT)%mod+(LT*RF)%mod)%mod;
                    }
                }else if(exp[k]=='|'){
                    if(isTrue){
                        ways=(ways+ (LT*RT)%mod+(LF*RT)%mod+(LT*RF)%mod)%mod;
                    }else{
                        ways=(ways+ (LF*RF)%mod)%mod;
                    }
                }else{
                    if(isTrue){
                        ways=(ways+(LF*RT)%mod+(LT*RF)%mod)%mod;
                    }else{
                        ways=(ways+ (LF*RF)%mod+(LT*RT)%mod)%mod;
                    }
                }
            }
            dp[i][j][isTrue]=ways;
            }
            
        }
    }
    return dp[0][n-1][1];
}
