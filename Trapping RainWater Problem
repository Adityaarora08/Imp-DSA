class Solution {
public:
    int trap(vector<int>& height) {
        //poopets stack approach
        int n=height.size();
        stack<int> st;
        int res=0;
        for(int i=0;i<n;i++){
            while(!st.empty() && height[st.top()]<=height[i]){
                int curr=st.top();st.pop();
                if(st.empty())break;
                int l=i-st.top()-1;
                res+=(min(height[st.top()],height[i])-height[curr])*l;
            }
            st.push(i);
        } 
        return res;
        //BEST TWO POINTERS APPROACH
        // int l=0,h=n-1;
        // int leftMax=0,rightMax=0;
        // int res=0;
        // while(l<=h){
        //     if(leftMax<=rightMax){
        //         leftMax=max(leftMax,height[l]);
        //         res+=leftMax-height[l];
        //         l++;
        //     }else{
        //         rightMax=max(rightMax,height[h]);
        //         res+=rightMax-height[h];
        //         h--;
        //     }
        // }
        // return res;
        //TWO ARRAYS APPROACH
        // int leftmax[n];
        // int rightmax[n];
        // int maxi=0;
        // for(int i=0;i<n;i++){
        //     maxi=max(maxi,height[i]);
        //     leftmax[i]=maxi;
        // }
        // maxi=0;
        // for(int i=n-1;i>=0;i--){
        //     maxi=max(maxi,height[i]);
        //     rightmax[i]=maxi;
        // }
        // maxi=0;
        // for(int i=0;i<n;i++){
        //    maxi+= min(leftmax[i],rightmax[i])-height[i];
        // }
        // return maxi;
    }
};
