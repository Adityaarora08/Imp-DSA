#include <bits/stdc++.h> 
int f(int i,int w,vector<int> &profit, vector<int> &weight,vector<vector<int>> &dp){
    if(i==0){
        return profit[i]*(w/weight[i]);
    }
    if(dp[i][w]!=-1)return dp[i][w];
    int take=INT_MIN;
    int notTake=f(i-1,w,profit,weight,dp);
    if(weight[i]<=w)take=f(i,w-weight[i],profit,weight,dp)+profit[i];
    return dp[i][w]=max(take,notTake);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // vector<vector<int>> dp(n,vector<int>(w+1,0));
    // return f(n-1,w,profit,weight,dp);
    // for(int i=0;i<=w;i++){
    //     dp[0][i]=profit[0]*(i/weight[0]);
    // }
    vector<int> dp(w+1,0),temp(w+1,0);
    for(int i=0;i<=w;i++){
        dp[i]=(int(i/weight[0]))*profit[0];
    }
    for(int i=1;i<n;i++){
        for(int t=0;t<=w;t++){
            int take=INT_MIN;
            int notTake=dp[t];
            if(weight[i]<=t)take=temp[t-weight[i]]+profit[i];
            temp[t]=max(take,notTake);
        }
        dp=temp;
    }
    return dp[w];
}
