class Solution {
public:
//Memoization
int path(int i,int j,vector<vector<int>>& matrix,int n,vector<vector<int>>& dp){
    if(i==n-1 && j<n &&j>=0){
        return matrix[i][j];
    }
    if(i<0 || j<0 || i>n-1 ||j>n-1)
        return INT_MAX;
    if(dp[i][j]!=-1)return dp[i][j];
    int down=path(i+1,j,matrix,n,dp);
    int left=path(i+1,j-1,matrix,n,dp);
    int right=path(i+1,j+1,matrix,n,dp);

    return dp[i][j]=matrix[i][j]+min(down,min(left,right));
}
//Tabulation
/*
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int mini=INT_MAX;
        vector<vector<int>> dp(n,vector<int> (n,-1));
        // for(int i=0;i<n;i++){
        //     mini=min(mini,path(0,i,matrix,n,dp));
        // }
        for(int i=0;i<n;i++)dp[n-1][i]=matrix[n-1][i];
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<n;j++){
                int down=INT_MAX,left=INT_MAX,right=INT_MAX;
                down=dp[i+1][j];
                if(j>0)left=dp[i+1][j-1];
                if(j<n-1)right=dp[i+1][j+1];
                dp[i][j]=matrix[i][j]+min(down,min(left,right));
            }
        }
        for(int i=0;i<n;i++){
            mini=min(mini,dp[0][i]);
        }
        return mini;
    }
    */
    //Space Optimized
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int mini=INT_MAX;
        vector<int> dp(n);
        for(int i=0;i<n;i++)dp[i]=matrix[n-1][i];
        for(int i=n-2;i>=0;i--){
            vector<int> temp(n);
            for(int j=0;j<n;j++){
                int down=INT_MAX,left=INT_MAX,right=INT_MAX;
                down=dp[j];
                if(j>0)left=dp[j-1];
                if(j<n-1)right=dp[j+1];
                temp[j]=matrix[i][j]+min(down,min(left,right));
            }
            dp=temp;
        }
        for(int i=0;i<n;i++){
            mini=min(mini,dp[i]);
        }
        return mini;
    }
};
