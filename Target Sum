class Solution {
public:
int countPartitions(int n, int d, vector<int> &arr) {
    int total=0;
    for(int i=0;i<n;i++)total+=arr[i];
    if(total-d<0 || (total-d)%2)return 0;
    int s2=(total-d)/2;
    // vector<vector<int>> dp(n,vector<int>(s2+1,0));
    vector<int> dp(s2+1,0),temp(s2+1);
    if(arr[0]==0)dp[0]=2;
    else dp[0]=1;
    if(arr[0]!=0 &&arr[0]<=s2)dp[arr[0]]=1;
    for(int i=1;i<n;i++){
        for(int target=0;target<=s2;target++){
            int notTake=dp[target],take=0;
            if(arr[i]<=target)take=dp[target-arr[i]];
            temp[target]=(take+notTake);
        }
        dp=temp;
    }
    return dp[s2];
}
// int f(int i,int sum,int target,vector<int>& nums){
//     if(i==0){
//         if(sum+nums[i]==target || sum-nums[i]==target)return 1;
//         return 0;
//     }
//     int add=f(i-1,sum,target,nums);
//     int sub=0;
//     if(nums[i]<=sum)sub=f(i-1,sum-nums[i],target,nums);
//     return add+sub;
// }
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0,n=nums.size();
        // for(int i=0;i<n;i++)sum+=nums[i];
        // return f(n-1,sum,target,nums);
        return countPartitions(n,target,nums);
    }
};
