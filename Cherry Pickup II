class Solution {
public:
//Memoization
    int path(int i,int j1,int j2,vector<vector<int>>& grid,int r,int c,vector<vector<vector<int>>> &dp){
        if(j1<0||j2<0||j1>=c||j2>=c)return -1e8;
        if(i==r-1){
            if(j1==j2)return grid[i][j1];
            else return grid[i][j1]+grid[i][j2];
        }
        if(dp[i][j1][j2]!=-1)return dp[i][j1][j2];
        int maxi=-1e8;
        for(int dj1=-1;dj1<=+1;dj1++){
            for(int dj2=-1;dj2<=+1;dj2++){
                int value=0;
                if(j1==j2){
                    value=grid[i][j1];
                }else{
                    value=grid[i][j1]+grid[i][j2];
                }
                value+=path(i+1,j1+dj1,j2+dj2,grid,r,c,dp);
                maxi=max(maxi,value);
            }
        }
        return dp[i][j1][j2]=maxi;
    }
    //Tabulation
    int cherryPickup(vector<vector<int>>& grid) {
        int r=grid.size(),c=grid[0].size();
        // vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,vector<int>(c,-1)));
        // return path(0,0,c-1,grid,r,c,dp);
        vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,vector<int>(c)));
        for(int i=0;i<c;i++){
            for(int j=0;j<c;j++){
                if(i==j)dp[r-1][i][j]=grid[r-1][j];
                else{
                    dp[r-1][i][j]=grid[r-1][j]+grid[r-1][i];
                }
            }
        }
        for(int i=r-2;i>=0;i--){
            for(int j=0;j<c;j++){
                for(int k=0;k<c;k++){
                    int maxi=INT_MIN;
                    for(int dj1=-1;dj1<=+1;dj1++){
                    for(int dj2=-1;dj2<=+1;dj2++){
                int value=0;
                if(j==k){
                    value=grid[i][j];
                }else{
                    value=grid[i][j]+grid[i][k];
                }
                if(j+dj1>=0 && k+dj2>=0 && j+dj1<c && k+dj2<c )
                value+=dp[i+1][j+dj1][k+dj2];
                maxi=max(maxi,value);
            }
        }
        dp[i][j][k]=maxi;
                }
            }
        }
        return dp[0][0][c-1];
    }
    //Can space optimize to 2d dp instead of 3d
};
