class Solution {
public:
//Memoization
    int f(int i,int buy,vector<int>& prices, int t,int n,vector<vector<vector<int>>> &dp){
        if(t==0)return 0;
        if(i==n)return 0;
        int profit=0;
        if(dp[i][buy][t]!=-1)return dp[i][buy][t];
        if(buy){
            int sell=prices[i]+f(i+1,0,prices,t-1,n,dp);
            int notSell=f(i+1,1,prices,t,n,dp);
            profit=max(sell,notSell);
        }else{
            int buy=-prices[i]+f(i+1,1,prices,t,n,dp);
            int notBuy=f(i+1,0,prices,t,n,dp);
            profit=max(buy,notBuy);
        }
        return dp[i][buy][t]=profit;
    }
    int maxProfit(vector<int>& prices) {
        //Space Optimized
        int n=prices.size();
        vector<vector<int>> dp(2,vector<int>(3,0)),temp(2,vector<int>(3,0));
        for(int i=0;i<3;i++)dp[0][i]=0;

        for(int i=n-1;i>=0;i--){
            for(int buy=0;buy<2;buy++){
                temp[0][0]=temp[1][0]=0;
                for(int t=1;t<=2;t++){
                    int profit=0;
                    if(buy){
                    int sell=prices[i]+dp[0][t-1];
                    int notSell=dp[1][t];
                    profit=max(sell,notSell);
                    }else{
                        int buy=-prices[i]+dp[1][t];
                        int notBuy=dp[0][t];
                        profit=max(buy,notBuy);
                    }
                    temp[buy][t]=profit;
                    }
                    dp=temp;
            }
        }
        return dp[0][2];
        //Tabulation
        // vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        // return f(0,0,prices,2,n,dp);
        // for(int i=0;i<n;i++){
        //     dp[i][0][0]=dp[i][1][0]=0;
        // }
        // for(int i=0;i<3;i++)dp[n][0][i]=0;

        // for(int i=n-1;i>=0;i--){
        //     for(int buy=0;buy<2;buy++){
        //         for(int t=1;t<=2;t++){
        //             int profit=0;
        //             if(buy){
        //             int sell=prices[i]+dp[i+1][0][t-1];
        //             int notSell=dp[i+1][1][t];
        //             profit=max(sell,notSell);
        //             }else{
        //                 int buy=-prices[i]+dp[i+1][1][t];
        //                 int notBuy=dp[i+1][0][t];
        //                 profit=max(buy,notBuy);
        //             }
        //             dp[i][buy][t]=profit;
        //             }
        //     }
        // }
        // return dp[0][0][2];
    }
};
