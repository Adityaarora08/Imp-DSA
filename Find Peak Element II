class Solution {
public:
// int findMax(vector<vector<int>>mat, int r){
//         int maxi=INT_MIN;
//         int res_idx=-1;
//         for(int i=0;i<mat[0].size();i++){
//             if(mat[r][i]>maxi){
//                 maxi=mat[r][i];
//                 res_idx=i;
//             }

//         }
//         return res_idx;
//     }
//     vector<int> findPeakGrid(vector<vector<int>>& mat) {
//         // binary search in rows 
//         //finding maximum element in that perticular row
//         // for corner rows we need to check only bottom & top element & for middle row check for bottom & top element both
//         int low=0;
//         int high=mat.size()-1;
//         while(low<=high){
//             int mid=low+(high-low)/2;
//             int col_idx=findMax(mat,mid);
//             if(mid==0){
//                 if(mat[mid+1][col_idx]<mat[mid][col_idx])
//                     return {mid,col_idx};
//             }
//             else if(mid==mat.size()-1){
//                 if(mat[mid-1][col_idx]<mat[mid][col_idx])
//                     return {mid,col_idx};
//             }
//             else{
//                 if((mat[mid+1][col_idx]<mat[mid][col_idx]) && (mat[mid-1][col_idx]<mat[mid][col_idx])){
//                     return {mid,col_idx};
//                 }
//             }

//             //binary search for row if mat[mid][col_idx]<mat[mid+1][col_idx] move down else up

//             if(mat[mid][col_idx]<mat[mid+1][col_idx]){
//                 low=mid+1;
//             }else{
//                 high=mid-1;
//             }
//         }
//         return {-1,-1};
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
    //      int row = mat.size();
    //     int col = mat[0].size();
    //     vector<int> v;

    //     for(int i = 0; i < row; i++)
    //     {
    //         int low = 0;
    //         int high = col-1;
    //         while(low <= high)
    //         {
    //             int mid = (low  + high) >> 1;
    //             int u = i > 0 ? mat[i-1][mid] : -1;
    //             int l = mid > 0 ? mat[i][mid-1] : -1;
    //             int d = i < row-1 ? mat[i+1][mid] : -1;
    //             int r = mid < col-1 ? mat[i][mid+1] : -1;
    //             int m1 = max(u, d);
    //             int m2 = max(l, r);
    //             int l1 = max(l, mat[i][0]);
    //             int l2 = max(r, mat[i][col-1]);

    //             if(mat[i][mid] >= max(m1, m2))
    //             {
    //                 v.push_back(i);
    //                 v.push_back(mid);
    //                 return v;
    //             }
    //             else if(l1 > l2)
    //                 high = mid - 1;
    //             else
    //                 low  = mid + 1;
    //         }
    //     }
    //     return v;
        int n=mat.size(),col=mat[0].size();
        vector<int> ans;
        for(int i=0;i<n;i++){
            int l=0,h=mat[i].size()-1;
            while(l<=h){
                int mid=(l+h)>>1;
                if((mid==0 || (mid>0 && mat[i][mid]>mat[i][mid-1])) && (mid==mat[i].size()-1 ||(mid<mat[i].size()-1 && mat[i][mid]>mat[i][mid+1])) && (i==0 || (i>0 && mat[i][mid]>mat[i-1][mid])) && (i==n-1 ||(i<n-1 && mat[i][mid]>mat[i+1][mid]))){
                    ans.push_back(i);
                    ans.push_back(mid);
                    return ans;
                }else if(mid>0 && mid<col-1 && max(mat[i][mid+1],mat[i][col-1])<max(mat[i][mid-1],mat[i][0])){
                    h=mid-1;
                    // l=mid+1;
                }else{
                    // h=mid-1;
                    l=mid+1;
                }
            }
        }
        return ans;
    }
};
