#include <bits/stdc++.h> 
//Memoization Solution
int f(int index,vector<int> &nums,vector<int> &dp){
    if(index>=nums.size())return 0;
    if(dp[index]!=-1)return dp[index];
    int a=f(index+1,nums,dp);
    int b=f(index+2,nums,dp)+nums[index];
    return dp[index]=max(a,b);
}
//Tabulation Solution
/*
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    vector<int> dp(nums.size()+1,-1);
    // return f(0,nums,dp);
    dp[0]=nums[0];
    // dp[1]=nums[1];
    for(int i=1;i<nums.size();i++){
        int l=nums[i];
        if(i>1)
        l=dp[i-2]+nums[i];
        int r=dp[i-1];
        dp[i]=max(l,r);
    }
    return dp[nums.size()-1];

}
*/
//Space optimized Solution
int maximumNonAdjacentSum(vector<int> &nums){
    int prev1=nums[0];
    int prev2=0;
    for(int i=1;i<nums.size();i++){
        int l=nums[i];
        if(i>1)l+=prev2;
        int r=prev1;
       prev2=prev1;
        prev1=max(l,r);
    }
    return prev1;

}
