#include<bits/stdc++.h>
//memoization
int point(int index,int last,vector<vector<int>> &points,vector<vector<int> >& dp){
    if(index==0){
        int maxi=INT_MIN;
        for(int i=0;i<3;i++){
            if(i!=last){
                maxi=max(maxi,points[0][i]);
            }
        }
        return maxi;
    }
    if(dp[index][last]!=-1)return dp[index][last];
    int maxii=INT_MIN;
    for(int i=0;i<3;i++){
        if(i!=last){
            maxii=max(maxii,points[index][i]+point(index-1,i,points,dp));
        }
    }
    return dp[index][last]=maxii;
}
//Tabulation
/*
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int> > dp(n,vector<int> (4,-1));
    // return point(n-1,3,points,dp);
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][1],points[0][0]);
    dp[0][3]=max(points[0][1],max(points[0][0],points[0][2]));
    for(int day=1;day<n;day++){
        for(int last=0;last<4;last++){
            dp[day][last]=0;
            for(int i=0;i<3;i++){
                if(i!=last){
                    dp[day][last]=max(dp[day][last],points[day][i]+dp[day-1][i]);
                }
            }
        }
    }
    return dp[n-1][3];
}
*/
//Space optimization
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<int> dp(4);
    dp[0]=max(points[0][1],points[0][2]);
    dp[1]=max(points[0][0],points[0][2]);
    dp[2]=max(points[0][1],points[0][0]);
    dp[3]=max(points[0][1],max(points[0][0],points[0][2]));
    for(int day=1;day<n;day++){
        vector<int> temp(4,0);
        for(int last=0;last<4;last++){
            for(int i=0;i<3;i++){
                if(i!=last){
                    temp[last]=max(temp[last],points[day][i]+dp[i]);
                }
            }
        }
        dp=temp;
    }
    return dp[3];
}
