class Solution {
public:
    bool jump(int i,vector<int>&nums,vector<int> &dp){
        if(i==nums.size()-1){
            return true;
        }
        if(i>=nums.size())return false;
        if(dp[i]!=-1)return dp[i];
        if(nums[i]==0)return dp[i]=0;
        bool ans=false;
        for(int k=1;k<=nums[i];k++){
            ans|=jump(i+k,nums,dp);
        }
        return dp[i]=ans;
    }
    bool canJump(vector<int>& nums) {
        if(nums.size()==1)return true;
        int maxi=0;
        vector<int> dp(nums.size()+1,-1);
        return jump(0,nums,dp);
        // dp[nums.size()-1]=true;
        // for(int i=nums.size()-2;i>=0;i--){
        //     if(nums[i]==0){
        //         dp[i]=0;
        //     }
        //     else{
        //         bool ans=0;
        //         for(int j=1;j<=nums[i] && (i+j)<nums.size();j++){
        //             ans=ans|dp[i+j];
        //             if(ans) break;
        //         }
        //         dp[i]=ans;
        //     }
        // }
        // return dp[0];
    }
};
