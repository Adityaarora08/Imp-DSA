class Solution {
public:
bool check(vector<int>& nums,int idx,vector<int> &dp){
    if(idx>=nums.size()-1)return true;
        if(nums[idx]==0)return false;
        if(dp[idx]!=-1)return dp[idx];
        bool ans=false;
        for(int i=1;i<=nums[idx];i++){
            ans|=check(nums,idx+i,dp);
        }
        return dp[idx]=ans;
}
    bool canJump(vector<int>& nums) {
        //optimised
        int maxi=nums[0];
        for(int i=1;i<nums.size();i++){
            if(i>maxi)return false;
            maxi=max(maxi,i+nums[i]);
        }
        return true;
        // vector<int> dp(nums.size(),-1);
        // return check(nums,0,dp);
        //tabulation
        // vector<bool> dp(nums.size());
        // dp[nums.size()-1]=true;
        // for(int i=nums.size()-2;i>=0;i--){
        //     bool ans=false;
        //     if(nums[i]==0)dp[i]=false;
        //     else{
        //         for(int j=1;(i+j)<nums.size() && j<=nums[i];j++){
        //         ans|=dp[i+j];
        //         if(ans)break;
        //         }
        //         dp[i]=ans;
        //     }
        // }
        // return dp[0];
    }
};
