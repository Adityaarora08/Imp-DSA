class Solution {
public:
//Memoization
int pathSum(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& dp){
    if(i==0 && j==0){
        return grid[i][j];
    }
    if(i<0 ||j<0){
        return INT_MAX;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    int up=pathSum(i-1,j,grid,dp);
    int left=pathSum(i,j-1,grid,dp);
    return dp[i][j]=grid[i][j]+min(up,left);
}
//Tabulation
    // int minPathSum(vector<vector<int>>& grid) {
    //     int n=grid.size(),m=grid[0].size();
    //     vector<vector<int>> dp(n,vector<int> (m));
    //     // return pathSum(n-1,m-1,grid,dp);
    //     dp[0][0]=grid[0][0];
    //     for(int i=0;i<n;i++){
    //         for(int j=0;j<m;j++){
    //             if(i==0&&j==0)continue;
    //             int up=INT_MAX,left=INT_MAX;
    //             if(i>0)up=dp[i-1][j];
    //             if(j>0)left=dp[i][j-1];
    //             dp[i][j]=grid[i][j]+min(up,left);
    //         }
    //     }
    //     return dp[n-1][m-1];
    // }
//Space Optimized
int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<int> dp(m,0);
        for(int i=0;i<n;i++){
            vector<int> temp(m);
            for(int j=0;j<m;j++){
                if(i==0&&j==0){
                    temp[j]=grid[0][0];
                    continue;
                }
                int up=INT_MAX,left=INT_MAX;
                if(i>0)up=dp[j];
                if(j>0)left=temp[j-1];
                temp[j]=grid[i][j]+min(up,left);
            }
            dp=temp;
        }
        return dp[m-1];
    }
};
