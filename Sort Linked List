/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   ListNode* merge(ListNode* l1,ListNode* l2){
       ListNode* tempp=new ListNode(0);
       ListNode* curr=tempp;
       while(l1!=NULL && l2!=NULL){
           if(l1->val<l2->val){
               tempp->next=new ListNode(l1->val);
               l1=l1->next;
           }else{
               tempp->next=new ListNode(l2->val);
               l2=l2->next;
           }
           tempp=tempp->next;
       }
       while(l1!=NULL){
               tempp->next=new ListNode(l1->val);
               l1=l1->next;
               tempp=tempp->next;
       }
       while(l2!=NULL){
               tempp->next=new ListNode(l2->val);
               l2=l2->next;
               tempp=tempp->next;
       }
       return curr->next;
   }
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head ->next == NULL)
            return head;
       ListNode* temp=NULL,*slow=head,*fast=head;
       while(fast!=NULL && fast->next!=NULL){
           temp=slow;
           slow=slow->next;
           fast=fast->next->next;
       }
       temp->next=NULL;
       ListNode* l1=sortList(head);
       ListNode* l2=sortList(slow);

       return merge(l1,l2);
    }
};
