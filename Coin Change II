class Solution {
public:
int f(int i,int amount,vector<int>& coins,vector<vector<int>> &dp){
    if(i==0){
        if(amount%coins[i]==0)return 1;
        return 0;
    }
    if(dp[i][amount]!=-1)return dp[i][amount];
    int take=0,notTake=f(i-1,amount,coins,dp);
    if(amount>=coins[i])take=f(i,amount-coins[i],coins,dp);
    return dp[i][amount]=take+notTake;

}
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        // vector<vector<int>> dp(n,vector<int>(amount+1,0));
        // return f(n-1,amount,coins,dp);
        vector<int> dp(amount+1,0),temp(amount+1,0);
        for(int i=0;i<=amount;i++){
            if(i%coins[0]==0)
               dp[i]=1;
            else dp[i]=0;
        }
        for(int i=1;i<n;i++){
            for(int t=0;t<=amount;t++){
                int take=0,notTake=dp[t];
                if(t>=coins[i])take=temp[t-coins[i]];
                temp[t]=take+notTake;
            }
            dp=temp;
        }
        return dp[amount];
    }
};
