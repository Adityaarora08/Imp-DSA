/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void rightTraversal(TreeNode* root,int level,vector<int> &ds){
        if(root==NULL)return;
        if(level==ds.size())ds.push_back(root->val);
        rightTraversal(root->right,level+1,ds);
        rightTraversal(root->left,level+1,ds);
    }
    vector<int> rightSideView(TreeNode* root) {
        // queue<TreeNode*> q;
        // q.push(root);
        vector<int> ans;
        rightTraversal(root,0,ans);
        // if(root==NULL)return ans;
        // while(!q.empty()){
        //     int n=q.size();
        //     vector<int> arr;
        //     for(int i=0;i<n;i++){
        //         TreeNode* curr=q.front();
        //         q.pop();
        //         if(curr!=NULL){
        //             arr.push_back(curr->val);
        //             if(curr->left!=NULL){
        //                 q.push(curr->left);
        //             }
        //             if(curr->right!=NULL){
        //                 q.push(curr->right);
        //             } 
        //         }
        //     }
        //     if(arr.size()>0){
        //     int a=arr.size()-1;
        //     ans.push_back(arr[a]);
        //     }
        // }
        return ans;
    }
};
