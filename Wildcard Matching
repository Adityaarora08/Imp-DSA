class Solution {
public:
bool f(int i,int j,string s, string p,vector<vector<int>> &dp){
    if(i<0&&j<0)return true;
    if(i<0&&j>=0 )return false;
    if(j<0&&i>=0){
        while(i>=0){
            if(s[i]!='*')return false;
            i--;
        }
        return true;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(s[i]==p[j] || s[i]=='?'){
        return dp[i][j]=f(i-1,j-1,s,p,dp);
    }
    if(s[i]=='*'){
        // bool nothing=f(i-1,j,s,p);
        // bool take=f(i,j-1,s,p);
        return dp[i][j]=f(i-1,j,s,p,dp)||f(i,j-1,s,p,dp);
    }
    return dp[i][j]=false;
}
    bool isMatch(string s, string p) {
        int n=s.length(),m=p.length();
        // vector<vector<int>> dp(m,vector<int> (n,-1));
        // return f(m-1,n-1,p,s,dp);
        //Space optimised
        vector<bool> dp(n+1,false),temp(n+1,false);
        dp[0]=true;
        for(int i=1;i<=n;i++)dp[i]=false;
        for(int i=1;i<=m;i++){
            bool flag=true;
            int ii=i;
             while(ii>0){
                   if(p[ii-1]!='*'){
                    //    dp[i][0]=false;
                       flag=false;
                       break;
                   }
                    ii--;
                }
                temp[0]=flag;
            for(int j=1;j<=n;j++){
                if(p[i-1]==s[j-1] || p[i-1]=='?'){
                     temp[j]=dp[j-1];
                }else if(p[i-1]=='*'){
                    temp[j]=dp[j]||temp[j-1];
                }
                else temp[j]=false;
            }
            dp=temp;
        }
        return dp[n];
        //Tabulation
        // vector<vector<bool>> dp(m+1,vector<bool> (n+1,false));
        // dp[0][0]=true;
        // for(int i=1;i<=n;i++)dp[0][i]=false;
        // for(int i=1;i<=m;i++){
        //     bool flag=true;
        //     int ii=i;
        //      while(ii>0){
        //            if(p[ii-1]!='*'){
        //             //    dp[i][0]=false;
        //                flag=false;
        //                break;
        //            }
        //             ii--;
        //         }
        //         dp[i][0]=flag;  
        // }
        // for(int i=1;i<=m;i++){
        //     for(int j=1;j<=n;j++){
        //         if(p[i-1]==s[j-1] || p[i-1]=='?'){
        //              dp[i][j]=dp[i-1][j-1];
        //         }else if(p[i-1]=='*'){
        //             dp[i][j]=dp[i-1][j]||dp[i][j-1];
        //         }
        //         else dp[i][j]=false;
        //     }
        // }
        // return dp[m][n];
    }
};
