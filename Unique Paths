#include <bits/stdc++.h> 
//Memoization
int paths(int m,int n,vector<vector<int> > &dp){
	if(m==0 && n==0)return 1;
	if(m<0 || n<0){
		return 0;
	}
	if(dp[m][n]!=-1)return dp[m][n];
	int up=paths(m-1,n,dp);
	int left=paths(m,n-1,dp);
	return dp[m][n]=up+left;
}
//Tabulation
/*
int uniquePaths(int m, int n) {
	// Write your code here.
	vector<vector<int> > dp(m,vector<int> (n));
	dp[0][0]=1;
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			if(i==0&&j==0){
				continue;
			}
			int up=0,down=0;
			if(i>0)up=dp[i-1][j];
			if(j>0)down=dp[i][j-1];
			dp[i][j]=up+down;
		}
	}
	return dp[m-1][n-1];
	// return paths(m-1,n-1,dp);
}
*/
//Space optimization
int uniquePaths(int m, int n) {
	// Write your code here.
	vector<int> dp(n,0);
	// dp[0]=1;
	for(int i=0;i<m;i++){
		vector<int> temp(n);
		for(int j=0;j<n;j++){
			if(i==0&&j==0){
				temp[j]=1;
				continue;
			}
			int up=dp[j];
			int left=0;
			if(j>0)left=temp[j-1];
			temp[j]=up+left;
		}
		dp=temp;
	}
	return dp[n-1];
	// return paths(m-1,n-1,dp);
}
