#include <bits/stdc++.h> 
int f(int i,int target,vector<int>& num,vector<vector<int>> &dp){
    // if(i>=n)return 0;
    // if(target==0){
    //     return 1;
    // }
    if(i==0)
{
        if(target==0 && num[0]==0) return 2;
        if(num[0]==target || target==0) return 1;
        return 0;
}
    if(dp[i][target]!=-1)return dp[i][target];
    int notTake=f(i-1,target,num,dp);
    int take=0;
    if(num[i]<=target)take=f(i-1,target-num[i],num,dp);
    return dp[i][target]=take+notTake;
}
int findWays(vector<int> &num, int tar)
{
    int n=num.size();
    vector<vector<int>> dp(n,vector<int> (tar+1,0));
    // return f(n-1,tar,num,dp);
    for(int i=0;i<n;i++)dp[i][0]=1;
    if(num[0]<=tar)dp[0][num[0]]=1;
    if(num[0] == 0) dp[0][0] = 2; 
    for(int i=1;i<n;i++){
        for(int target=0;target<=tar;target++){
            int notTake=dp[i-1][target];
            int take=0;
            if(num[i]<=target)take=dp[i-1][target-num[i]];
            dp[i][target]=take+notTake;
        }
    }
    return dp[n-1][tar];
}
