class Solution {
public:
    int atmostK(vector<int>& s, int k){
        int l=0,h=0;
        int count=0;
        unordered_map<int,int> mp;
        // set<int> st;
        while(h<s.size()){
            mp[s[h]]++;
            // if(mp[s[h]]==1){
            //     st.insert(s[h]);
            // }
            while(mp.size()>k){
                mp[s[l]]--;
                if(mp[s[l]]==0){
                    mp.erase(s[l]);
                }
                l++;
            }
            count+=h-l+1;
            h++;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& s, int k) {
        return atmostK(s,k)-atmostK(s,k-1);
    }
};

class Solution {
public:
    int subarraysWithKDistinct(vector<int>& s, int k) {
    int h=0,l=0,prefix=0,siz=0;
    int count=0;
    unordered_map<int,int> mp;
    while(h<s.size()){
        mp[s[h]]++;
        if(mp[s[h]]==1){
            siz++;
        }
        if(siz>k){
            mp[s[l]]--;
            l++;
            prefix=0;
            siz--;
        }
        while(mp[s[l]]>1){
            mp[s[l]]--;
            l++;
            prefix++;
        }
        if(siz==k){
            count+=prefix+1;
        }
        h++;
    }
    return count;
    }
};
