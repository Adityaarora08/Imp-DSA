int f(int i,int n,vector<int> &price,vector<vector<int>> &dp){
	if(i==0){
		return n*price[0];
	}
	if(dp[i][n]!=-1)return dp[i][n];
	int take=INT_MIN;
	int notTake=f(i-1,n,price,dp);
	if((i+1)<=n)take=price[i]+f(i,n-(i+1),price,dp);
	return dp[i][n]=max(take,notTake);
}
int cutRod(vector<int> &price, int n)
{
	vector<vector<int>> dp(n,vector<int>(n+1,0));
	// return f(n-1,n,price,dp);
	for(int i=0;i<=n;i++){
		dp[0][i]=i*price[0];
	}
	for(int i=1;i<n;i++){
		for(int t=0;t<=n;t++){
			int take=INT_MIN;
			int notTake=dp[i-1][t];
			if((i+1)<=t)take=price[i]+dp[i][t-(i+1)];
			dp[i][t]=max(take,notTake);
		}
	}
	return dp[n-1][n];
}
