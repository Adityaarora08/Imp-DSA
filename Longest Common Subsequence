class Solution {
public:
   int f(int i,int j,string s1,string s2,vector<vector<int>> &dp){
       if(i==0 || j==0){
           return 0;
       }
       if(dp[i][j]!=-1)return dp[i][j];
       if(s1[i-1]==s2[j-1]){
           return dp[i][j]=1+f(i-1,j-1,s1,s2,dp);
       }
       return dp[i][j]=max(f(i-1,j,s1,s2,dp),f(i,j-1,s1,s2,dp));
   }
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.length(),m=text2.length();
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // return f(n,m,text1,text2,dp);
        vector<int> dp(m+1,0),temp(m+1,0);
        for(int i=0;i<=m;i++){
            dp[i]=0;
        }
        // for(int i=0;i<=n;i++){
        //     dp[i][0]=0;
        // }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1[i-1]==text2[j-1]){
                    temp[j]=1+dp[j-1];
                }else{
                    temp[j]=max(dp[j],temp[j-1]);
                }
            }
            dp=temp;
        }
        return dp[m];
    }
};
