class Solution {
public:

    void solve(vector<string> &ans, int n , int open , int close,string output){
        if(output.length() == 2*n){
            ans.push_back(output);
            return;
        }

        // open 
        if(open<n) solve(ans,n,open+1,close,output+"(");

        if(close<open) solve(ans,n,open,close+1,output+")");
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        solve(ans,n,0,0,"");
        return ans;
    }
};
// class Solution {
// public:
//     void generate(int i,int n,string ds,vector<string> &ans,stack<char> st) {
//         if(ds.length()==2*n){
//             if(st.empty()){
//                 ans.push_back(ds);
//             }else{
//                 return;
//             }
//         }
//         if(ds.length()>2*n)return;
//         if(!st.empty()){
//             string curr=ds+st.top();
//             st.pop();
//             generate(i+1,n,curr,ans,st);
//             st.push(')');
//             string curr2=ds+"(";
//             st.push(')');
//             generate(i,n,curr2,ans,st);
//         }else{
//             string curr=ds+"(";
//             st.push(')');
//             generate(i,n,curr,ans,st);
//         }
//     }
//     vector<string> generateParenthesis(int n) {
//         vector<string> ans;
//         stack<char> st;
//         generate(0,n,"",ans,st);
//         return ans;
//     }
// };
