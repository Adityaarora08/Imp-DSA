class Solution {
public:
    void dfs(int i,int j,vector<vector<char>> &grid,vector<vector<int>> &vis){
        if(i<0 && j<0 && j>=grid[0].size() && i>=grid.size())return;
        if(vis[i][j])return ;
        vis[i][j]=1;
        // if(i>0 && j>0 && grid[i-1][j-1]=='1')dfs(i-1,j-1,grid,vis);
        if(i>0 && grid[i-1][j]=='1')dfs(i-1,j,grid,vis);
        // if(i>0 && j<grid[0].size()-1 && grid[i-1][j+1]=='1')dfs(i-1,j+1,grid,vis);
        if(j<grid[0].size()-1 && grid[i][j+1]=='1')dfs(i,j+1,grid,vis);
        // if(i<grid.size()-1 && j<grid[0].size()-1 && grid[i+1][j+1]=='1')dfs(i+1,j+1,grid,vis);
        if(i<grid.size()-1 && grid[i+1][j]=='1')dfs(i+1,j,grid,vis);
        // if(i<grid.size()-1 &&j>0 && grid[i+1][j-1]=='1')dfs(i+1,j-1,grid,vis);
        if(j>0 && grid[i][j-1]=='1')dfs(i,j-1,grid,vis);
    }
    // void dfs(int row,int col,vector<vector<char>>&grid,vector<vector<int>>&vis){
    //     int n=grid.size(),m=grid[0].size();
    //     if(row<0||row>=n||col<0||col>=m||grid[row][col]=='0'||vis[row][col]){
    //         return;
    //     }
    //     vis[row][col]=1;
    //     vector<pair<int,int>>dir={{1,0},{0,1},{-1,0},{0,-1}};
    //     for(auto ele:dir){
    //         int nr=row+ele.first,nc=col+ele.second;
    //         dfs(nr,nc,grid,vis);
    //     }
    // }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size(),m=grid[0].size();
        int cnt=0;
        vector<vector<int>> vis(n,vector<int>(m,0));
        // vector<int> vis(n,0);
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
        //         if(grid[i][j]=='1'){
        //             adj[i].push_back(j);
        //             adj[j].push_back(i);
        //         }
        //     }
        // }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                dfs(i,j,grid,vis);
                cnt++;
            }
            }
        }
        return cnt;
    }
};
