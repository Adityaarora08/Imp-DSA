class Solution {
public:
int paths(int i,int j,vector<vector<int>>& obstacleGrid,vector<vector<int>>& dp){
    if(i<0 || j<0 || obstacleGrid[i][j]==1){
        return 0;
    }
    if(i==0 && j==0){
        return 1;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    int up=paths(i-1,j,obstacleGrid,dp);
    int left=paths(i,j-1,obstacleGrid,dp);
    return dp[i][j]=up+left;
}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        // vector<vector<int>> dp(n,vector<int> (m,0));
        vector<int> dp(m,0);
        // return paths(n-1,m-1,obstacleGrid,dp);
        // if(obstacleGrid[0][0]==0)dp[0][0]=1;
        for(int i=0;i<n;i++){
            vector<int> temp(m);
            for(int j=0;j<m;j++){
                if(i==0&&j==0&&obstacleGrid[0][0]==0){
                    temp[j]=1;
                    continue;
                }
                int up=0,left=0;
                if(i>0&&obstacleGrid[i-1][j]==0)up=dp[j];
                if(j>0 && obstacleGrid[i][j-1]==0)left=temp[j-1];
                temp[j]=up+left;
            }
            dp=temp;
        }
        if(obstacleGrid[n-1][m-1]==0)return dp[m-1];
        return 0;
    }
};
