/* Problem
Gary is a teacher at XYZ school. To reward his N students he bought a packet of N candies all with different flavours. But the problem is some students like certain flavour while some doesn't. Now Gary wants to know the number of ways he can distribute these N candies to his N students such that every student gets exactly one candy he likes.
Input Format :
The first line of input will contain T(number of test cases), each test case follows as.
Line 1 : An integer N (1<= N <= 16) denoting number of students and candies.
Next N lines: N integers describing the preferences of one student. 1 at i'th (0 <= i < N) position denotes that this student likes i'th candy, 0 means he doesn't.
Assume input to be 0-indexed based.
Output Format :
Return the number of ways Gary can distribute these N candies to his N students such that every student gets exactly one candy he likes for each test case in a new line.
Sample Input:
1
3
1 1 1
1 1 1
1 1 1
Sample Output:
6
*/
#include<bits/stdc++.h>
using namespace std;
// int f(int i, vector<bool> vis, vector<vector<int>> &matrix, int n,
//       vector<vector<int>> &dp) {
//   if (i == n)
//     return 1;
//   int ways = 0;
//   for (int k = 0; k < n; k++) {
//     if (matrix[i][k] == 1) {
//       if (dp[i][k][vis[k]] != -1)
//         ways += dp[i][k][vis[k]];
//       if (!vis[k]) {
//           vis[k] = true;
//           ways = ways + f(i + 1, vis, matrix, n, dp);
//           vis[k] = false;
//           dp[i][k]=ways;
//       }
//     }
//     }
//     return ways;
// }
long long f(int i, int mask, int n, vector<vector<int>> &matrix,
            vector<long long> &dp) {
  if(mask==(1<<n)-1)return 1;
  if (i >= n)
    return 0;
if(dp[mask]!=-1)
  return dp[mask];
long long ways = 0;
for (int k = 0; k < n; k++) {
  if (!(mask & 1 << k)) {
    if (matrix[i][k]) {
      ways += f(i + 1, mask | 1 << k, n, matrix, dp);
    }
  }
  }
  return dp[mask] =ways;
}
int main() {

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<vector<int>> matrix(n, vector<int>(n));
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
        cin >> matrix[i][j];
    // vector<bool> vis(n, false);
    // vector<vector<int>> dp(n, vector<int>(n, -1));
    vector<long long> dp(1<<n,-1);
    cout << f(0, 0,n, matrix,dp) << endl;
  }
  return 0;
}
