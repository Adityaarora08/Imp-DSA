class Solution {
public:
int f(int i,int j,string s1,string s2,vector<vector<int>> &dp){
    if(j==0)return i+1;
    if(i==0)return j+1;
    // int take=INT_MAX;
    if(dp[i][j]!=-1) return dp[i][j];
    if(s1[i-1]==s2[j-1]){
        return dp[i][j]=f(i-1,j-1,s1,s2,dp);
    }
    int replacee=1+f(i-1,j-1,s1,s2,dp);
    int insert=1+f(i,j-1,s1,s2,dp);
    int deletee=1+f(i-1,j,s1,s2,dp);
    return dp[i][j]=min(deletee,min(replacee,insert));
}
    int minDistance(string s1, string s2) {
        int n=s1.length(),m=s2.length();
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        // return f(n,m,word1,word2,dp);
        vector<int> dp(m+1,0),temp(m+1,0);
        // for(int i=0;i<=n;i++)dp[i][0]=i;
        for(int i=0;i<=m;i++)dp[i]=i;
        
        for(int i=1;i<=n;i++){
            temp[0]=i;
            for(int j=1;j<=m;j++){
                if(s1[i-1]==s2[j-1]){
                    temp[j]=dp[j-1];
                }else{
                int replacee=1+dp[j-1];
                int insert=1+temp[j-1];
                int deletee=1+dp[j];
                temp[j]=min(deletee,min(replacee,insert));
                }
            }
            dp=temp;
        }
        return dp[m];
        // for(int i=1;i<=n;i++){
        //     for(int j=1;j<=m;j++){
        //         if(s1[i-1]==s2[j-1]){
        //             dp[i][j]=dp[i-1][j-1];
        //         }else{
        //         int replacee=1+dp[i-1][j-1];
        //         int insert=1+dp[i][j-1];
        //         int deletee=1+dp[i-1][j];
        //         dp[i][j]=min(deletee,min(replacee,insert));
        //         }
        //     }
        // }
        // return dp[n][m];
    }
};
