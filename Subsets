class Solution {
public:
    void solve(vector<int> &tmp,vector<vector<int>> &ans,int s,vector<int> &nums){
        ans.push_back(tmp);
        if(s==nums.size()){
            return;
        }
        
        for(int i = s; i < nums.size(); i++){
            tmp.push_back(nums[i]);
            solve(tmp,ans,i+1,nums);
            tmp.pop_back();
            while(i+1<nums.size() && nums[s] == nums[i+1]){
                i++;
            }
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> tmp;
        solve(tmp,ans,0,nums);
        return ans;
    }
};
//to remove duplicates when duplicates are present
class Solution {
public:
void subset(vector<int>& nums,vector<vector<int>>& ans,int index,vector<int> ds){
    // if(index==N){
        ans.push_back(ds);
        // return;
    // }
    for(int i=index;i<nums.size();i++){
        if(i!=index && nums[i]==nums[i-1])continue;
        ds.push_back(nums[i]);
        subset(nums,ans,i+1,ds);
        ds.pop_back();
    }
}
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds;
        sort(nums.begin(),nums.end());
        subset(nums,ans,0,ds);     
        return ans;
    }
};
