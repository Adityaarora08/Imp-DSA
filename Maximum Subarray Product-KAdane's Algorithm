//kadane's algorithm
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int p1=1,p2=1,maxi=INT_MIN;
        for(int i=0;i<nums.size();i++){
            p1=p1*nums[i];
            // p1=max(1,curr);
            maxi=max(maxi,p1);
            if(p1==0)p1=1;
        }
        for(int i=nums.size()-1;i>=0;i--){
            p2=p2*nums[i];
            // p2=max(1,curr);
            maxi=max(maxi,p2);
            if(p2==0)p2=1;
        }
        return maxi;
    }
};

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int prod1=nums[0],prod2=nums[0],result=nums[0];
        for(int i=1;i<nums.size();i++){
            int temp=max(nums[i],max(prod1*nums[i],prod2*nums[i]));
            prod2=min(nums[i],min(prod1*nums[i],prod2*nums[i]));
            prod1=temp;
            result=max(result,prod1);
        }
        return result;
    }
};
