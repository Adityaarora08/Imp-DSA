//{ Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


// } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    // vector<int> check(Job arr[],int n,int idx,int time,vector<int> ans,vector<vector<vector<int>>> &dp){
    //     if(idx==n){
    //         return ans;
    //     }
    //     if(dp[idx][time][0]!=-1)return dp[idx][time];
    //     vector<int> notTake=check(arr,n,idx+1,time,ans,dp);
    //     vector<int> take;
    //     if(arr[idx].dead>time){
    //         ans[1]+=arr[idx].profit;
    //         ans[0]++;
    //         take=check(arr,n,idx+1,time+1,ans,dp);
    //     }else{
    //         return dp[idx][time]=notTake;
    //     }
    //     if(take[1]>notTake[1]){
    //         return dp[idx][time]=take;
    //     }
    //     return dp[idx][time]=notTake;
        
    // }
    static bool comparator(Job a,Job b){
        // if(a.dead==b.dead){
            return a.profit>b.profit;
        // }
        // return a.dead<b.dead;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        sort(arr,arr+n,comparator);
        vector<int> ans(2,0);
        // int time=0;
        // vector<vector<vector<int>>> dp(n,vector<vector<int>>(n,vector<int>(2,-1)));
        // ans=check(arr,n,0,0,ans,dp);
        // for(int i=0;i<n;i++){
        //     if(arr[i].dead>=time){
        //         ans[1]+=arr[i].profit;
        //         ans[0]++;
        //         time++;
        //     }
        // }
        vector<int> vis(n,0);
        for(int i=0;i<n;i++){
            int j=arr[i].dead-1;
            while(j>=0 && vis[j]==1)j--;
            if(j>=0){
                ans[0]++;
                ans[1]+=arr[i].profit;
                vis[j]=1;
            }
        }
        return ans;
    } 
};

//{ Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}



// } Driver Code Ends
